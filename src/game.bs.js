// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Random = require("bs-platform/lib/js/random.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Canvas$StronglyTyped = require("./canvas.bs.js");
var Common$StronglyTyped = require("./common.bs.js");

var match = module.hot;

if (match !== undefined) {
  Js_primitive.valFromOption(match).accept();
} else {
  console.log("We are not hot");
}

var words = /* :: */[
  "Logging",
  /* :: */[
    "Memory Store",
    /* :: */[
      "postgresql",
      /* :: */[
        "kubernetes",
        /* :: */[
          "terraform",
          /* :: */[
            "mysql",
            /* :: */[
              "serverless",
              /* :: */[
                "containerization",
                /* :: */[
                  "scalability",
                  /* :: */[
                    "Redis",
                    /* :: */[
                      "RabbitMQ",
                      /* :: */[
                        "machine learning",
                        /* :: */[
                          "analytics",
                          /* :: */[
                            "Optimization",
                            /* :: */[
                              "CMS",
                              /* :: */[
                                "Elastic",
                                /* :: */[
                                  "Algolia",
                                  /* :: */[
                                    "Jaws",
                                    /* :: */[
                                      "Timber",
                                      /* :: */[
                                        "Iron",
                                        /* :: */[
                                          "Piio",
                                          /* [] */0
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

function nextState(state, ui) {
  var match = List.partition((function (w) {
          return w[/* text */0] === Curry._1(ui[/* input */3], /* () */0);
        }), state[/* words */0]);
  var captured = match[0];
  var match$1 = List.partition((function (w) {
          return w[/* y */2] > ui[/* height */0];
        }), match[1]);
  var crashed = match$1[0];
  var tmp = true;
  if (List.length(captured) <= 0) {
    var partial_arg = Curry._1(ui[/* input */3], /* () */0);
    tmp = !List.exists((function (param) {
            return Common$StronglyTyped.startsWith(partial_arg, param);
          }), match$1[1]);
  }
  if (tmp) {
    Curry._1(ui[/* clearInput */4], /* () */0);
  }
  state[/* words */0] = List.fold_left((function (words, word) {
          if (List.mem(word, captured) || List.mem(word, crashed)) {
            return words;
          } else {
            word[2] += 1.5;
            return List.append(words, /* :: */[
                        word,
                        /* [] */0
                      ]);
          }
        }), /* [] */0, state[/* words */0]);
  state[/* crashSites */2] = List.append(state[/* crashSites */2], List.map((function (word) {
              return /* record */[
                      /* left */word[/* x */1],
                      /* right */word[/* x */1] + Curry._1(ui[/* calculateWidth */5], word[/* text */0])
                    ];
            }), crashed));
  if (state[/* ticks */1] % 90 === 0) {
    var word = List.nth(words, Random.$$int(List.length(words) - 1 | 0));
    var max = ui[/* width */1] - Curry._1(ui[/* calculateWidth */5], word);
    state[/* words */0] = List.append(state[/* words */0], /* :: */[
          /* record */[
            /* text */word,
            /* x */Random.$$float(max),
            /* y */ui[/* fontSize */2]
          ],
          /* [] */0
        ]);
  }
  state[/* ticks */1] = state[/* ticks */1] + 1 | 0;
  return state;
}

var initialState = /* record */[
  /* words : [] */0,
  /* ticks */0,
  /* crashSites : [] */0
];

Canvas$StronglyTyped.paint(initialState, nextState);

exports.words = words;
exports.nextState = nextState;
exports.initialState = initialState;
/* match Not a pure module */
