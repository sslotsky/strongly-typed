// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Random from "bs-platform/lib/es6/random.js";
import * as Common$StronglyTyped from "./common.bs.js";

var words = /* :: */[
  "Logging",
  /* :: */[
    "Memory Store",
    /* :: */[
      "postgresql",
      /* :: */[
        "kubernetes",
        /* :: */[
          "terraform",
          /* :: */[
            "mysql",
            /* :: */[
              "serverless",
              /* :: */[
                "containerization",
                /* :: */[
                  "scalability",
                  /* :: */[
                    "Redis",
                    /* :: */[
                      "RabbitMQ",
                      /* :: */[
                        "machine learning",
                        /* :: */[
                          "analytics",
                          /* :: */[
                            "Optimization",
                            /* :: */[
                              "CMS",
                              /* :: */[
                                "Elastic",
                                /* :: */[
                                  "Algolia",
                                  /* :: */[
                                    "Jaws",
                                    /* :: */[
                                      "Timber",
                                      /* :: */[
                                        "Iron",
                                        /* :: */[
                                          "Piio",
                                          /* [] */0
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

function spawn(ui) {
  var word = List.nth(words, Random.$$int(List.length(words) - 1 | 0));
  var max = ui[/* width */2] - Curry._1(ui[/* calculateWidth */6], word);
  return /* record */[
          /* text */word,
          /* velocity */1.5 + Random.$$float(2.5),
          /* x */Random.$$float(max),
          /* y */ui[/* fontSize */3]
        ];
}

function nextState(state, ui) {
  if (state[/* gameOver */0]) {
    return state;
  } else {
    var match = List.partition((function (w) {
            return w[/* text */0] === Curry._1(ui[/* input */4], /* () */0);
          }), state[/* words */1]);
    var captured = match[0];
    var match$1 = List.partition((function (w) {
            return w[/* y */3] > ui[/* height */1];
          }), match[1]);
    var remaining = match$1[1];
    var match$2 = state[/* base */3];
    var baseRight = match$2[1];
    var baseLeft = match$2[0];
    var tmp = true;
    if (List.length(captured) <= 0) {
      var partial_arg = Curry._1(ui[/* input */4], /* () */0);
      tmp = !List.exists((function (param) {
              return Common$StronglyTyped.startsWith(partial_arg, param);
            }), remaining);
    }
    if (tmp) {
      Curry._1(ui[/* clearInput */5], /* () */0);
    }
    List.iter((function (word) {
            var left = word[/* x */2];
            var right = word[/* x */2] + Curry._1(ui[/* calculateWidth */6], word[/* text */0]);
            if (!Curry._2(state[/* crashCollector */4][/* covers */1], baseLeft > left ? baseLeft : left, baseRight < right ? baseRight : right)) {
              Curry._1(ui[/* onCrash */7], word);
            }
            Curry._1(state[/* crashCollector */4][/* crash */0], /* record */[
                  /* left */left,
                  /* right */right
                ]);
            console.log(Curry._2(state[/* crashCollector */4][/* percentCovered */2], baseLeft, baseRight));
            return /* () */0;
          }), match$1[0]);
    List.iter(ui[/* onCollect */8], captured);
    var newWords = List.map((function (word) {
            return /* record */[
                    /* text */word[/* text */0],
                    /* velocity */word[/* velocity */1],
                    /* x */word[/* x */2],
                    /* y */word[/* y */3] + word[/* velocity */1]
                  ];
          }), remaining);
    var match$3 = state[/* ticks */2] % 70;
    var newWords$1 = match$3 !== 0 ? newWords : List.append(newWords, /* :: */[
            spawn(ui),
            /* [] */0
          ]);
    var gameOver = Curry._2(state[/* crashCollector */4][/* covers */1], baseLeft, baseRight);
    return /* record */[
            /* gameOver */gameOver,
            /* words */newWords$1,
            /* ticks */state[/* ticks */2] + 1 | 0,
            /* base */state[/* base */3],
            /* crashCollector */state[/* crashCollector */4]
          ];
  }
}

export {
  words ,
  spawn ,
  nextState ,
  
}
/* No side effect */
