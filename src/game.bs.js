// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Random = require("bs-platform/lib/js/random.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

var match = module.hot;

if (match !== undefined) {
  Js_primitive.valFromOption(match).accept();
} else {
  console.log("We are not hot");
}

var words = /* :: */[
  "Logging",
  /* :: */[
    "Memory Store",
    /* :: */[
      "postgresql",
      /* :: */[
        "kubernetes",
        /* :: */[
          "terraform",
          /* [] */0
        ]
      ]
    ]
  ]
];

function startsWith(input, word) {
  return new RegExp("^" + input).test(word[/* text */0]);
}

function nextState(state, ui) {
  var match = List.partition((function (w) {
          return w[/* text */0] === Curry._1(ui[/* input */3], /* () */0);
        }), state[/* words */0]);
  var captured = match[0];
  var match$1 = List.partition((function (w) {
          return w[/* y */2] > ui[/* height */0];
        }), match[1]);
  var crashed = match$1[0];
  var tmp = true;
  if (List.length(captured) <= 0) {
    var partial_arg = Curry._1(ui[/* input */3], /* () */0);
    tmp = !List.exists((function (param) {
            return startsWith(partial_arg, param);
          }), match$1[1]);
  }
  if (tmp) {
    Curry._1(ui[/* clearInput */4], /* () */0);
  }
  List.iter((function (word) {
          if (List.mem(word, captured) || List.mem(word, crashed)) {
            state[/* words */0] = List.filter((function (w) {
                      return Caml_obj.caml_notequal(w, word);
                    }))(state[/* words */0]);
            return /* () */0;
          } else {
            word[2] += 1.0;
            return /* () */0;
          }
        }), state[/* words */0]);
  if (state[/* ticks */1] % 90 === 0) {
    var word = List.nth(words, Random.$$int(List.length(words) - 1 | 0));
    var max = ui[/* width */1] - Curry._1(ui[/* calculateWidth */5], word);
    state[/* words */0] = List.append(state[/* words */0], /* :: */[
          /* record */[
            /* text */word,
            /* x */Random.$$float(max),
            /* y */ui[/* fontSize */2]
          ],
          /* [] */0
        ]);
  }
  state[/* ticks */1] = state[/* ticks */1] + 1 | 0;
  return state;
}

var canvas = document.getElementById("canvas");

var context = canvas.getContext("2d");

function initUi() {
  var input = /* record */[/* contents */""];
  var clearInput = function () {
    input[0] = "";
    return /* () */0;
  };
  window.addEventListener("keypress", (function (e) {
          input[0] = input[0] + e.key;
          return /* () */0;
        }));
  return /* record */[
          /* height */600.0,
          /* width */600.0,
          /* fontSize */30,
          /* input */(function () {
              return input[0];
            }),
          /* clearInput */clearInput,
          /* calculateWidth */(function (str) {
              return context.measureText(str).width;
            })
        ];
}

var ui = initUi(/* () */0);

function paint(state) {
  context.clearRect(0, 0, ui[/* width */1] | 0, ui[/* height */0] | 0);
  context.font = String(ui[/* fontSize */2]) + "px Arial";
  var newState = nextState(state, ui);
  var words = newState[/* words */0];
  List.iter((function (word) {
          var match = startsWith(Curry._1(ui[/* input */3], /* () */0), word);
          var match$1 = Curry._1(ui[/* input */3], /* () */0).length;
          var match$2 = word[/* text */0].length;
          var match$3 = match ? /* tuple */[
              Curry._1(ui[/* input */3], /* () */0),
              $$String.sub(word[/* text */0], match$1, match$2 - match$1 | 0)
            ] : /* tuple */[
              "",
              word[/* text */0]
            ];
          var matching = match$3[0];
          var $$continue = word[/* x */1] + context.measureText(matching).width;
          context.fillStyle = "red";
          context.fillText(matching, word[/* x */1], word[/* y */2]);
          context.fillStyle = "blue";
          context.fillText(match$3[1], $$continue, word[/* y */2]);
          return /* () */0;
        }), words);
  window.requestAnimationFrame((function () {
          return paint(state);
        }));
  return /* () */0;
}

var initialState = /* record */[
  /* words : [] */0,
  /* ticks */0
];

paint(initialState);

exports.words = words;
exports.startsWith = startsWith;
exports.nextState = nextState;
exports.canvas = canvas;
exports.context = context;
exports.initUi = initUi;
exports.ui = ui;
exports.paint = paint;
exports.initialState = initialState;
/* match Not a pure module */
